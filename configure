#!/bin/sh
#
#
if test ! -z "$TMPDIR" ; then
    TMPDIR1="${TMPDIR}"
elif test ! -z "$TEMPDIR" ; then
    TMPDIR1="${TEMPDIR}"
else
    TMPDIR1="/tmp"
fi

cc=gcc
ld=ld

for opt do
  optarg=$(expr "x$opt" : 'x[^=]*=\(.*\)')
  case "$opt" in
  --help|-h) show_help=yes
  ;;
  --prefix=*) prefix="$optarg"
  ;;
  --includedir=*) includedir="$optarg"
  ;;
  --libdir=*) libdir="$optarg"
  ;;
  --mandir=*) mandir="$optarg"
  ;;
  --datadir=*) datadir="$optarg"
  ;;
  --disable-systemd) disable_systemd=1
  ;;
  --disable-uuid) disable_uuid=1
  ;;
  --disable-json) disable_json=1
  ;;
  *)
    echo "ERROR: unkown option $opt"
    echo "Try '$0 --help' for more information"
    exit 1
  ;;
  esac
done

if test -z "$prefix"; then
  prefix=/usr
fi
if test -z "$includedir"; then
  includedir="$prefix/include"
fi
if test -z "$libdir"; then
  libdir="$prefix/lib"
fi
if test -z "$mandir"; then
  mandir="$prefix/man"
fi
if test -z "$datadir"; then
  datadir="$prefix/share"
fi

if test "$show_help" = "yes"; then
cat <<EOF

Usage: configure [options]
Options: [defaults in brackets after descriptions]
  --help                   print this message
  --prefix=PATH            install in PATH [$prefix]
  --includedir=PATH        install headers in PATH [$includedir]
  --libdir=PATH            install libraries in PATH [$libdir]
  --mandir=PATH            install man pages in PATH [$mandir]
  --datadir=PATH           install shared data in PATH [$datadir]
  --disable-systemd        do not link against libsystemd
  --disable-uuid           do not link against libuuid
  --disable-json           do not link against libjson-c
EOF
exit 0
fi

config_host_mak="config-host.mak"
config_host_h="config-host.h"

rm -rf $config_host_mak
rm -rf $config_host_h

fatal() {
  echo $@
  echo "Configure failed, check config.log and/or the above output"
  rm -rf $config_host_mak
  rm -rf $config_host_h
  exit 1
}

# Print result for each configuration test
print_config() {
  printf "%-30s%s\n" "$1" "$2"
}

# Default CFLAGS
CFLAGS="-D_GNU_SOURCE -include config-host.h"
BUILD_CFLAGS=""

# Print configure header at the top of $config_host_h
echo "/*" > $config_host_h
echo " * Automatically generated by configure - do not modify" >> $config_host_h
printf " * Configured with:" >> $config_host_h
printf " * '%s'" "$0" "$@" >> $config_host_h
echo "" >> $config_host_h
echo " */" >> $config_host_h

echo "# Automatically generated by configure - do not modify" > $config_host_mak
printf "# Configured with:" >> $config_host_mak
printf " '%s'" "$0" "$@" >> $config_host_mak
echo >> $config_host_mak

do_cc() {
    # Run the compiler, capturing its output to the log.
    echo $cc "$@" >> config.log
    $cc "$@" >> config.log 2>&1 || return $?
    # Test passed. If this is an --enable-werror build, rerun
    # the test with -Werror and bail out if it fails. This
    # makes warning-generating-errors in configure test code
    # obvious to developers.
    if test "$werror" != "yes"; then
        return 0
    fi
    # Don't bother rerunning the compile if we were already using -Werror
    case "$*" in
        *-Werror*)
           return 0
        ;;
    esac
    echo $cc -Werror "$@" >> config.log
    $cc -Werror "$@" >> config.log 2>&1 && return $?
    echo "ERROR: configure test passed without -Werror but failed with -Werror."
    echo "This is probably a bug in the configure script. The failing command"
    echo "will be at the bottom of config.log."
    fatal "You can run configure with --disable-werror to bypass this check."
}

compile_object() {
  do_cc $CFLAGS -c -o $TMPO $TMPC
}

compile_prog() {
  local_cflags="$1"
  local_ldflags="$2 $LIBS"
  echo "Compiling test case $3" >> config.log
  do_cc $CFLAGS $local_cflags -o $TMPE $TMPC $LDFLAGS $local_ldflags
}

feature_not_found() {
  feature=$1
  packages=$2

  echo ""
  echo "ERROR: $feature package requirements not met"
  if test ! -z "$packages" ; then
    echo "ERROR: needs $packages installed"
  fi
  fatal ""
}

has() {
  type "$1" >/dev/null 2>&1
}

output_mak() {
  echo "$1=$2" >> $config_host_mak
}

output_sym() {
  output_mak "$1" "y"
  echo "#define $1" >> $config_host_h
}

print_and_output_mak() {
  print_config "$1" "$2"
  output_mak "$1" "$2"
}

print_and_output_mak "prefix" "$prefix"
print_and_output_mak "includedir" "$includedir"
print_and_output_mak "libdir" "$libdir"
print_and_output_mak "mandir" "$mandir"
print_and_output_mak "datadir" "$datadir"

##########################################
# check for libuuid
libuuid="no"
if [ -z "$disable_uuid" ] ; then
    ${ld} -o /dev/null -luuid >/dev/null 2>&1
    if [ $? -eq 0 ]; then
	libuuid="yes"
    fi
fi
print_config "libuuid" "${libuuid}"

##########################################
# check for SystemD
systemd="no"
if [ -z "$disable_systemd" ] ; then
    pkg-config --exists libsystemd --atleast-version=242
    if [ $? -eq 0 ]; then
	systemd="yes"
    fi
fi
print_config "systemd" "${systemd}"

##########################################
# check for libjson-c
libjsonc="no"
if [ -z "$disable_json" ] ; then
    ${ld} -o /dev/null -ljson-c >/dev/null 2>&1
    if [ $? -eq 0 ]; then
	libjsonc="yes"
    fi
fi
print_config "libjson-c" "${libjsonc}"

##########################################
# check for c++
cpp="no"
cpp_binary=$CXX
if [ -z "$cpp_binary" ] ; then
    cpp_binary=g++
fi
which $cpp_binary > /dev/null 2> /dev/null
if [ $? -eq 0 ]; then
  cpp="yes"
fi
print_config "cpp" "${cpp}"


if test "$libuuid" = "yes"; then
  output_sym "CONFIG_LIBUUID"
  echo "override LIBS += -luuid" >> $config_host_mak
  echo "override LIB_DEPENDS += uuid" >> $config_host_mak 
fi
if test "$systemd" = "yes"; then
  output_sym "CONFIG_SYSTEMD"
  echo "override LIBS += -lsystemd" >> $config_host_mak
fi
if test "$libjsonc" = "yes"; then
    output_sym "CONFIG_JSONC"
    echo "override LIBS += -ljson-c" >> $config_host_mak
    echo "override LIB_DEPENDS += json-c" >> $config_host_mak
fi
if test "$cpp" = "yes"; then
  output_mak "CONFIG_CPLUSPLUS" "y"
fi
